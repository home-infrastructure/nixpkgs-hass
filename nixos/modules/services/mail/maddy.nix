{ config, lib, pkgs, ... }:

with lib;

let

  name = "maddy";

  cfg = config.services.maddy;

  defaultConfig = ''
    # Minimal configuration with TLS disabled, adapted from upstream example
    # configuration here https://github.com/foxcpp/maddy/blob/master/maddy.conf
    # Do not use this in production!

    auth.pass_table local_authdb {
      table sql_table {
        driver sqlite3
        dsn credentials.db
        table_name passwords
      }
    }

    storage.imapsql local_mailboxes {
      driver sqlite3
      dsn imapsql.db
    }

    table.chain local_rewrites {
      optional_step regexp "(.+)\+(.+)@(.+)" "$1@$3"
      optional_step static {
        entry postmaster postmaster@$(primary_domain)
      }
      optional_step file /etc/maddy/aliases
    }
    msgpipeline local_routing {
      destination postmaster $(local_domains) {
        modify {
          replace_rcpt &local_rewrites
        }
        deliver_to &local_mailboxes
      }
      default_destination {
        reject 550 5.1.1 "User doesn't exist"
      }
    }

    target.remote outbound_delivery {
      limits {
        destination rate 20 1s
        destination concurrency 10
      }
      mx_auth {
        dane
        mtasts {
          cache fs
          fs_dir mtasts_cache/
        }
        local_policy {
            min_tls_level encrypted
            min_mx_level none
        }
      }
    }

    target.queue remote_queue {
      target &outbound_delivery
      autogenerated_msg_domain $(primary_domain)
      bounce {
        destination postmaster $(local_domains) {
          deliver_to &local_routing
        }
        default_destination {
            reject 550 5.0.0 "Refusing to send DSNs to non-local addresses"
        }
      }
    }
  '';

  defaultSubmissionConfig = ''
    limits {
      all rate 50 1s
    }
    auth &local_authdb
    source $(local_domains) {
      check {
          authorize_sender {
              prepare_email &local_rewrites
              user_to_email identity
          }
      }
      destination postmaster $(local_domains) {
          deliver_to &local_routing
      }
      default_destination {
          modify {
              dkim $(primary_domain) $(local_domains) default
          }
          deliver_to &remote_queue
      }
    }
    default_source {
      reject 501 5.1.8 "Non-local sender domain"
    }
  '';

  defaultSmtpConfig = ''
    limits {
      all rate 20 1s
      all concurrency 10
    }
    dmarc yes
    check {
      require_mx_record
      dkim
      spf
    }
    source $(local_domains) {
      reject 501 5.1.8 "Use Submission for outgoing SMTP"
    }
    default_source {
      destination postmaster $(local_domains) {
        deliver_to &local_routing
      }
      default_destination {
        reject 550 5.1.1 "User doesn't exist"
      }
    }
  '';

  defaultImapConfig = ''
    auth &local_authdb
    storage &local_mailboxes
  '';


in {
  options = {
    services.maddy = {

      enable = mkEnableOption "Maddy, a free an open source mail server";

      user = mkOption {
        default = "maddy";
        type = with types; uniq string;
        description = ''
          User account under which maddy runs.

          <note><para>
          If left as the default value this user will automatically be created
          on system activation, otherwise the sysadmin is responsible for
          ensuring the user exists before the maddy service starts.
          </para></note>
        '';
      };

      group = mkOption {
        default = "maddy";
        type = with types; uniq string;
        description = ''
          Group account under which maddy runs.

          <note><para>
          If left as the default value this group will automatically be created
          on system activation, otherwise the sysadmin is responsible for
          ensuring the group exists before the maddy service starts.
          </para></note>
        '';
      };

      hostname = mkOption {
        default = "localhost";
        type = with types; uniq string;
        example = ''example.com'';
        description = ''
          Hostname to use. It should be FQDN.
        '';
      };

      primaryDomain = mkOption {
        default = "localhost";
        type = with types; uniq string;
        example = ''mail.example.com'';
        description = ''
          Primary MX domain to use. It should be FQDN.
        '';
      };

      localDomains = mkOption {
        type = with types; listOf str;
        default = ["$(primary_domain)"];
        example = [
          "$(primary_domain)"
          "example.com"
          "other.example.com"
        ];
        description = ''
          Define list of allowed domains.
        '';
      };

      config = mkOption {
        type = with types; nullOr lines;
        default = defaultConfig;
        description = ''
          Server configuration, see
          <link xlink:href="https://maddy.email">https://maddy.email</link> for
          more information. The default configuration of this module will setup
          minimal maddy instance for mail transfer without TLS encryption.
          <note><para>
          This should not be used in a production environment.
          </para></note>
        '';
      };

      openFirewall = mkOption {
        type = types.bool;
        default = false;
        description = ''
          Open the configured incoming and outgoing mail server ports.
        '';
      };

      tls = {
        keyPath = mkOption {
          type = types.nullOr types.path;
          example = "/etc/ssl/mx1.example.org.key";
          description = "Path to the private key used for TLS.";
          default = null;
        };

        certPath = mkOption {
          type = types.nullOr types.path;
          example = "/etc/ssl/mx1.example.org.crt";
          description = "Path to the certificate used for TLS.";
          default = null;
        };
      };

      imap = {
        enable = mkOption {
          type = types.bool;
          default = true;
          description = "Enable Imap connection.";
        };

        listenAddress = mkOption {
          description = "Imap listening host";
          default = "0.0.0.0";
          type = types.str;
        };

        port = mkOption {
          type = types.ints.u16;
          default = 143;
          description = "Server port to listen for Imap requests.";
        };

        tlsEnable = mkOption {
          type = types.bool;
          default = false;
          description = "Enable Imap tls connection.";
        };

        tlsListenAddress = mkOption {
          description = "TLS Imap listening host";
          default = "0.0.0.0";
          type = types.str;
        };

        tlsPort = mkOption {
          type = types.ints.u16;
          default = 993;
          description = "Server port to listen for Imap tls requests.";
        };

        config = mkOption {
          type = with types; nullOr lines;
          default = defaultImapConfig;
          description = ''
            Default Imap config.
          '';
        };
      };

      smtp = {
        enable = mkOption {
          type = types.bool;
          default = true;
          description = "Enable Smtp connection.";
        };

        listenAddress = mkOption {
          description = "Smtp listening host";
          default = "0.0.0.0";
          type = types.str;
        };

        port = mkOption {
          type = types.ints.u16;
          default = 25;
          description = "Server port to listen for Smtp requests.";
        };

        config = mkOption {
          type = with types; nullOr lines;
          default = defaultSmtpConfig;
          description = ''
            Default Smtp config.
          '';
        };
      };

      submission = {
        enable = mkOption {
          type = types.bool;
          default = true;
          description = "Enable Submission connection.";
        };

        listenAddress = mkOption {
          description = "Submission listening host";
          default = "0.0.0.0";
          type = types.str;
        };

        port = mkOption {
          type = types.ints.u16;
          default = 587;
          description = "Server port to listen for Submission requests.";
        };

        tlsEnable = mkOption {
          type = types.bool;
          default = false;
          description = "Enable Submission tls connection.";
        };

        tlsListenAddress = mkOption {
          description = "Submission TLS listening host";
          default = "0.0.0.0";
          type = types.str;
        };

        tlsPort = mkOption {
          type = types.ints.u16;
          default = 465;
          description = "Server port to listen for Submission tls requests.";
        };

        config = mkOption {
          type = with types; nullOr lines;
          default = defaultSubmissionConfig;
          description = ''
            Default Submission config.
          '';
        };
      };

    };
  };

  config = mkIf cfg.enable {

    assertions = [{
      assertion = (cfg.imap.tlsEnable || cfg.submission.tlsEnable) -> (
        cfg.tls.certPath != null && cfg.tls.keyPath != null
      );
      message = ''
        If maddy is configured to use TLS, tls.certPath and tls.keyPath must be provided.
        Read more about obtaining TLS certificates here:
        https://maddy.email/tutorials/setting-up/#tls-certificates
      '';
    }];

    systemd = {
      packages = [ pkgs.maddy ];
      services.maddy = {
        serviceConfig = {
          User = cfg.user;
          Group = cfg.group;
          StateDirectory = [ "maddy" ];
        };
        restartTriggers = [ config.environment.etc."maddy/maddy.conf".source ];
        wantedBy = [ "multi-user.target" ];
      };
    };

    environment.etc."maddy/maddy.conf" = {
      text = ''
        $(hostname) = ${cfg.hostname}
        $(primary_domain) = ${cfg.primaryDomain}
        $(local_domains) = ${toString cfg.localDomains}
        hostname ${cfg.hostname}

        ${if (cfg.tls.certPath != null && cfg.tls.keyPath != null) then ''
          tls file ${cfg.tls.certPath} ${cfg.tls.keyPath}
        '' else ''
          tls off
        ''}

        ${optionalString (cfg.smtp.enable) ''
          smtp tcp://${cfg.smtp.listenAddress}:${toString cfg.smtp.port} {
            ${cfg.smtp.config}
          }
        ''}

        ${optionalString (cfg.imap.enable || cfg.imap.tlsEnable) ''
          imap ${optionalString (cfg.imap.enable) "tcp://${cfg.imap.listenAddress}:${toString cfg.imap.port}"} ${optionalString (cfg.imap.tlsEnable) "tls://${cfg.imap.tlsListenAddress}:${toString cfg.imap.tlsPort}"} {
            ${cfg.imap.config}
          }
        ''}

        ${optionalString (cfg.submission.enable || cfg.submission.tlsEnable) ''
          submission ${optionalString (cfg.submission.enable) "tcp://${cfg.submission.listenAddress}:${toString cfg.submission.port}"} ${optionalString (cfg.submission.tlsEnable) "tls://${cfg.submission.tlsListenAddress}:${toString cfg.submission.tlsPort}"} {
            ${cfg.submission.config}
          }
        ''}

        ${cfg.config}
      '';
    };

    users.users = optionalAttrs (cfg.user == name) {
      ${name} = {
        isSystemUser = true;
        group = cfg.group;
        description = "Maddy mail transfer agent user";
      };
    };

    users.groups = optionalAttrs (cfg.group == name) {
      ${cfg.group} = { };
    };

    networking.firewall.allowedTCPPorts = mkMerge [
      (mkIf cfg.smtp.enable [ cfg.smtp.port ])
      (mkIf cfg.imap.enable [ cfg.imap.port ])
      (mkIf cfg.imap.tlsEnable [ cfg.imap.tlsPort ])
      (mkIf cfg.submission.enable [ cfg.submission.port ])
      (mkIf cfg.submission.tlsEnable [ cfg.submission.tlsPort ])
    ];

    environment.systemPackages = [
      pkgs.maddy
    ];
  };
}
